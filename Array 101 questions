import java.lang.foreign.StructLayout;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;


public class array 
{
    public static void main(String[] args) 
    {

 //  1. Program to sort a numeric and string array. 


               int a[] = {34, 56, 1, 7, 8, 5, 3, 34, 50, 41, 67, 69, 0};     // int(numeric)   array
               String b[] = {"c++","java", "python", "html", "css", "js" };  //     String(character) array

            // System.out.println("a : " + Arrays.toString(a));

            // Arrays.sort(a);  // sort method uses Dual-Pivot QuickSort Algo. - O(n log(n)), doesn't return anything, static method, so that
            //                 //it can invoked directly by their class name.  
            // System.out.println(Arrays.sort(a));   -- can't write like that, not applicable..
            //System.out.println("a : " + Arrays.toString(a));

            
            // System.out.println();
            
            // System.out.println("b : " + Arrays.toString(b));  //   .toString() -  help us to print all the content without using loops.

            // Arrays.sort(b);    //  sort as per their ASCII values. 
            // Arrays.sort(b, Collections.reverseOrder());  // print in reverse order. doesn't work with primitive data types.   
                                                            //it's a method of Collection class. 
            // System.out.println("b : " + Arrays.toString(b));  //   .toString() -  help us to print all teh content without loops. 
            
            // to use reverseOrder() method in primitive types. 
            // Integer a1[] = {-4, -8, 23, 1, 77, 34, 41} ; 
            // Arrays.sort(a1, Collections.reverseOrder());
            // System.out.println(a1);  // address of a
            // System.out.println(Arrays.toString(a1));


                        //    Using loops to sort numeric array. 
        //    for (int i = 0; i < b.length; i++) 
        //    {
        //         for (int j = i+1; j < b.length; j++) // don't try to start j = 1,  undesired output. 
        //         {
        //                 int temp = 0;
        //                 if (a[i] > a[j])  // change > to < for descending order. 
        //                  // comparing first element to the next one, if first one is bigger than it'll replaced by second one. 
        //                 // the > is undefined to argument type string. 
        //                 {
        //                     // exchanging values
        //                         temp = a[i];
        //                         a[i] = a[j];
        //                         a[j] = temp;
        //                 }

        //         }
        //    } 
        //     // Arrays.sort(a);
        //     System.out.println(a);   //   prints the address of a(array).
        //     System.out.println(Arrays.toString(a));  // print Array. 


 // 2.  sort the subArray of a Array. (a array derived from array).

            // int a2[] = {1, 6, 56, 34, 90, 23, 12, 54, 432, 87 ,32, 43, 21, 6745, 0};
            // // sorting subarray from 5th(included) index to 11th(not included), means 5 to 10 index elements are sorted in ascending order. 
            // Arrays.sort(a2, 5, 11);
            // System.out.println(Arrays.toString(a2));


 // 3.  sum of values of an array... and average value of array elements. 
            // int sum = 0;
            // for (int i = 0; i < a2.length; i++){ sum += a2[i]; }
            // int ave = sum/a2.length;
            // System.out.println("Sum is : "+sum);
            // System.out.println("Average is : "+ave);

//  4.  check array contains a specific elememt or not. 

               Scanner sc = new Scanner(System.in);
                   int no = sc.nextInt();
                   int a3[] = {1,2,3,4,5,6,7,8,9,0};
                   
                   for (int i = 0; i < a3.length; i++) 
                   {
                            if (no == a3[i]) 
                            {
                                System.out.println("Given Number "+ no +" is present in an array at the index " + i +  " elem in array is " + a3[i]+".");
                                // java doesn't have indexOf method for arrays, so we printing i to show the index positionof given element.
                            }
                   }
                   sc.close();


//  5. removing a element from an array. 

                //first method
            //   int ary[] = {1, 2, 3, 4, 5, 6};
            //   System.out.println(Arrays.toString(ary));
            //   int removeIndex = 3;   // or we can input from user by Scanner class . works only till 4th index.  
            //   for (int i = removeIndex; i < ary.length - 1; i++) 
            //   {
            //             ary[i] = ary[i+1] ;   // changing value from next one. -- 1 2 3 5 6 6
            //   }
            //   //  last and second last element will exist twice. 
            //   System.out.println(Arrays.toString(ary));

                //second method
            // int temp = 0;
            // for (int i = 0; i < ary.length; i++) 
            // {
            //     if (removeIndex != i) {
            //         temp = ary[i] ;              // 1 2 3 3 5 6
            //         } 
            //     System.out.print(temp + "\s\s");
            //   }

                  //  third method
            //   int ary2[] = new int[ary.length - 1];
            //   int k = 0;                    // to increase length and add elements to ary2....
            //   for (int i = 0; i < ary.length; i++) 
            //   {
            //     if (i == removeIndex) {
            //         continue;             // agar i  ka index or removing index equal hai to kuch nahi karo...
            //     }
            //     ary2[k++] = ary[i];       // or if not equal , then add that index's element in ary2. 
            //   }
            //   System.out.println(Arrays.toString(ary2));

                // fourth method
            //  ArrayList<Integer> al = new ArrayList<Integer>() ;
            //  al.add(0, 1);
            //  al.add(2);
            //  al.add(3);
            //  al.add(4);
            //  al.add(5);
            //  al.add(6);
            //  System.out.println("before : "+al);
            //  al.remove(2);
            //  System.out.println("after: "+al);
             
            //  or we can convert our array to arraylist..
            //  List  al2 = Arrays.asList(ary)  ;                        doesn't working......‼️ ‼️ ‼️ ‼️ ‼️ ‼️
            //  al2.remove(2);
            //  System.out.println("after : " + Arrays.toArray(al2));   //  printing address. 


//  6. insert a element at a specific position. 

                // int a[] = {1,2,3,4,5,6,7,8,9};
                // int indexposi = 3;
                // int newVal = 412;
                // for (int i = a.length - 1; i > indexposi; i--) {  // loop last se chalna start hokar -- ho raha hai or har last index pe 
                //     // uske pehle wali value insert ho rahi hai, or jab desired indexposi  aai to loop end, or usme hamari new Val dal gai.
                //         a[i] = a[i-1];
                // }
                // a[indexposi] = newVal;
                // System.out.println(Arrays.toString(a));

//  7.  find the max and min number.

                    // Arrays.sort(a);
                    // int max = a[0];
                    // int min = a[a.length - 1];
                    // System.out.println(max + " " + min);
                    
                    // // or  

                    // int maximum = 0, minimum = 0;
                    // for (int i = 0; i < a.length; i++) 
                    // {
                    //         if (maximum < a[i]) 
                    //          {
                    //             maximum = a[i];
                    //         } 
                    //         else if(minimum > a[i]) 
                    //          {
                    //             minimum = a[i];
                    //         }   
                    // }
                    // System.out.println(maximum + " " + minimum);

                           
//  8.  reverse an integer array.

                // int a[] = {1,2,3,4,5};
                // int l = a.length-1;
                // int l2 = a.length-1;
                // int b[] = new int[l], k = 0;  // same length as a. 

                // for (int i = l-1; i >= 0; i--) {
                //             b[k++] = a[l2];         //  not printing last element. 
                //             l2--;
                // }
                //b[l-1] = a[-----];
                        // or
                // int i = l-1;
                // while (i >= 0) {
                //     b[k++] = a[l2];          //  not printing last element. 
                //     l2--;
                //     i--;
                // }
                // last value auto last mai chali jayegi so , -1 extra
                // mai last value pehle daal raha hu, 

                // System.out.println(Arrays.toString(a));
                // System.out.println(Arrays.toString(b));

                            // or  -  proper solution. 
                    // int a[] = {1,2,3,4,5};
                    // System.out.println(Arrays.toString(a));
                    // int l = a.length;

                    // for (int i = 0; i < l/2; i++) 
                    //     { int temp = a[i];   /// frist element on temp. 
                    //             a[i] = a[l-i-1];   // a[5 - 0 - 1] = a[4]th index = 5. 
                    //         a[l-i-1] = temp;    }   // first elem at last(4th index). 

                    // System.out.println(Arrays.toString(a));

    //  9.  find duplicate values. 
                        // int a[] = {1,3,6,8,3,2,1,0,8,6};
                        // int l = a.length;   // not -1 here
                        //  in an integer array and also for String array. 
                        // for (int i = 0; i < l; i++) {
                        //             for (int j = i+1; j < l; j++) {   // not 1 here, every time it will start from starting. 
                        //                     if (a[i] == a[j]) {
                        //                         System.out.println("duplicate : "+a[j]);
                                                
                        //                     }
                        //                 }
                        //             }
                        //  in an String array. 
                        // String b[] = {"sh", "an", "it", "aw", "sh", "an"};
                        // int l2 = b.length;   // not -1 here
                        // for (int i = 0; i < l2; i++) {
                        //             for (int j = i+1; j < l2; j++) {   // not 1 here, every time it will start from starting. 
                        //                     if (b[i] == b[j]) {
                        //                         System.out.println("duplicate : "+b[j]);
                                                     
                        //                     }
                        //             }
                        // }


    // 10 . commom element between two array(String, integer) .
                        //     int a[] = {1,2,3,4,5};
                        //     int b[] = {6,7,8,9,1};
                        //     String c[] = {"sh", "an"};
                        //     String d[] = {"ti", "aw", "ui", "Sh"};
                        //     int l1 = a.length;
                        //     int l2 = b.length;
                        //     int l3 = c.length;
                        //     int l4 = d.length;
                        //             // for integer
                        //   for (int i = 0; i < l1; i++) {
                        //             for (int j = 0; j < l2; j++) {
                        //                     if (a[i] == b[j]) {
                        //                             System.out.println(a[i] + " is a common element. ");
                        //                     }
                        //                 }
                        //             }
                        //            //  for string 
                        //     HashSet<String> set = new HashSet<String>();
                        //     for (int i = 0; i < l3; i++) {
                        //             for (int j = 0; j < l4; j++) {
                        //                     if (c[i].equals(d[j])) {
                        //                          set.add(d[j]);//System.out.println(a[i] + " is a common element. ");
                        //             }

                        //         }
                        //      }
                        //      System.out.println((set) + " is common. ");
                            
    
    //  11.  remove duplicate element from array.
                            // int a[] = {1, 2, 3, 4, 5, 4, 3, 2, 1, 6, 6, 7, 7, 8, 8};
                            // int   l = a.length;
                            // for (int i = 0; i < l; i++) {
                            //             for (int j = i+1; j < l; j++) {
                            //                     if (a[i] == a[j]) {  // checking all the elements after ith posotion. 
                            //                             a[j] = a[l-1];  // last element inserting at (i+1)th posi. and deleting last idx by l--;
                            //                             l--; 
                            //                     }
                            //             }
                            // }
                            // int a1[] = Arrays.copyOf(a, l);
                            // System.out.println(Arrays.toString(a1));  
 
    //  12.  add two matrices of same size. 
                            // int a[][] = {{1, 2, 3 }, {4, 5, 6 }, {7, 8, 9 }};
                            // int b[][] = {{3, 2, 1 }, {4, 5, 4 }, {9, 8, 7 }};
                            // int l1 = a.length; int l2 = b.length;
                            // int c[][] = new int[l1][l2]; 
                            //  System.out.println("first array : ");      // printing first original array
                            // for (int i = 0; i < l1; i++) {
                            //             for (int j = 0; j < l1; j++) {
                            //                     System.out.print(a[i][j] + "\s");
                            //             }
                            //             System.out.println();             // after onr line. come to next line
                            // }
                            // System.out.println("second array : ");      //  printing second original array
                            // for (int i = 0; i < l2; i++) {
                            //             for (int j = 0; j < l2; j++) {
                            //                  System.out.print(b[i][j] + "\s");
                            //             }
                            //             System.out.println();           
                            // }
                            // // adding elements according to position. 
                            // System.out.println("final array with added elements : ");
                            // for (int i = 0; i < l1; i++) {
                            //     for (int j = 0; j <l2; j++) {
                            //             //int sum = a[i][j] + b[i][j];
                            //             c[i][j] = a[i][j] + b[i][j];
                            //     }
                            // }
                            // for (int i = 0; i < l1; i++) {
                            //             for (int j = 0; j < l2; j++) {
                            //                  System.out.print(c[i][j] + "\s\s");
                            //             }
                            //             System.out.println();          
                            // }
        
    //  13.  convert an array to arraylist and arraylist to array. 

                                         // array to arraylist
                            // int a[] = {1, 2, 3, 4, 5};     ----    can't be converted
                            String s[] = {"php", "python", "java", "javascript", "css"};
                            ArrayList<String> al = new ArrayList<String>();
                                     // al = Arrays.asList(s);  --  can't convert from list to arraylist

                            Collections.addAll(al, s);
                            al.add("c++");      // adding tp show - converted
                            System.out.println(al);

                                     //  to use asList() method. 
                            List<String> l = new ArrayList<String>(Arrays.asList(s)) ;
                            l.add("html");
                            System.out.println(l);
                            
                            List<String> li = Arrays.asList(s) ;
                            //li.add(0, "C");  // can't add another element, coz it returns fixed-size
                            System.out.println(li);

                                //   arraylist to array  
                            ArrayList<String> a = new ArrayList<String>();
                            a.add("ram");
                            a.add("shyam");
                            a.add("Rraman");
                            a.add("ramnath");
                            a.add("ramkumar");

                            String s2[] = new String[a.size()];  // taking length of arraylist.
                            a.toArray(s2);
                            //s2[5] = "ramgovind";   ---  can't be added, ArrayIndexOutOfBoundException
                            System.out.println(Arrays.toString(s2));
    //  14.  find all pairs element in an array whose sum is equal to specified number. 

                    //     sumvalue(new int[] {1, 2, 3, 4, 5, 6, 7, 7}, 8);
                    //     sumvalue(new int[] {5, -6, 2, 9, -1, 18, 3}, 5);
        
        
        
        
                    //   // make sure to give a no that can be a answer of atleast one pair.
                    //     // make this method outside of main method, otherwise error
                    //     static void sumvalue(int []a , int no)
                    //     {
                    //         int l = a.length;
                    //         for (int i = 0; i < l; i++) {
                    //                     for (int j = i+1; j < l; j++) {
                    //                             if(a[i] + a[i] == no){
                    //                                     System.out.println(a[i] + " + " + a[j] + " = " + no);
                    //                             }
                    //                     }
                    //         }
                    //     }

    //  15 . test two arrays equality. (both have same element ay same index)
                           int a[] = {1, 2, 3, 4, 5};
                           int b[] = {1, 2, 3, 4, 5};
                            int l1 = a.length;
                            int l2 = b.length;
                        boolean bo = true;
                        if (l1 == l2) {                        
                                for (int i = 0; i < l1; i++) {
                                             if (a[i] != b[i]) {
                                                    bo = false;
                                            }
                                }
                          }
                          else{
                             bo = false;        // when length were different
                          }
                          // if remains true, arrays are equal. 
                          if (bo) {
                                System.out.println("Equal");
                          }
                          else{
                            System.out.println("not equal. ");
                          }

    // 16.  find a missing number in an array. 
                            // int a[] = {1, 2, 3, 4, 5, 6, 8, 9};
                            // int l = a.length;
                            // int smallest = a[0];
                            // int largest = a[a.length];
                            // for (int i = smallest; i <= largest; i++) {
                            //             if (a[i] == i+1) {

                            //             }else{
                            //                     System.out.println("missing no is : " + i);
                            //             }
                                
                            // }

                                // int lastnum = a[a.length-1];  // contains last value. 
                                //     // System.out.println(lastnum);
                                // int n = lastnum * ( (lastnum + 1) / 2 );  // 32 -- this is the expected output if that element isn't missing. 
                                //      //System.out.println(n);
                                // // declaring element to add all numbers
                                // System.out.println(sum);
                                // System.out.println("missing element is : " + (n - sum));
                                
                                    // int sum = ((l+1)*(l+2)/2); // contains 
                                    // System.out.println("if that element present then the sum would be : " + sum);  // 45

                                    // int sum2 = 0;
                                    // for (int i : a) {
                                    //         sum2 += i;
                                    // }
                                    // System.out.println("addition of element with missing element : " + sum2);    // 43

                                    // //  so difference of those gives us a missing number. 
                                    // System.out.println(" missing number : " + (sum - sum2));
                                    // for (int i = 0; i < l; i++) {
                                    //             sum -= a[i];
                                    //         }
                                    //         System.out.println(" missing number : "+sum);

        // 17. find common elements in three sorted arrays. 
                                        // when all arrays are of same size. 
                                    // int a[] = {1, 3, 5, 9};
                                    // int b[] = {9,  5, 1};
                                    // int c[] = {1, 2, 5, 9, 7, 8};
                                    // int l1 = a.length;
                                    // int l2 = a.length;
                                    // int l3 = a.length;
                                    //     System.out.print("Common Element is : ");
                                    // for (int i = 0; i < l1; i++) 
                                    // {
                                    //             for (int j = 0; j < l2; j++) 
                                    //             {
                                    //                     // if (a[i] == b[j]) 
                                    //                     // {
                                    //                             for (int j2 = 0; j2 < l3; j2++) 
                                    //                             {
                                    //                                         if (a[i] == b[j] &&  b[j] == c[j2]) // comparing like this is more good than that. 
                                    //                                         {
                                    //                                                 System.out.print( a[i] + " \s ");
                                    //                                                 j2++;
                                    //                                                 break;
                                    //                                         }
                                    //                             }
                                    //                         // j++;
                                    //                         // break;
                                    //                     //}
                                    //             }
                                    // }

        // 18 . move all zero at the end while maintaining othar elements order. 
                        //             int a[] = {1, 5, 7, 0, 4, 0, 2, 0, 3};
                        //             int l = a.length;
                        //             System.out.println("before : " + Arrays.toString(a));
                        // //  all non-zero elements are inserted in an array. and if some remaining space availabel in array that filled with 0.
                        //             int count = 0;
                        //             for(int i=0; i<l; i++)
                        //             {
                        //                 if(a[i] != 0)
                        //                 {
                        //                 a[count++] = a[i];  // inseritng all non zero elemnets.
                        //                 }
                        //             }
                        //             while( count < l)
                        //             {
                        //                 a[count++] = 0;  // filling 0 in blank spaces
                        //             }
                        //             System.out.println(" after : " + Arrays.toString(a));
                                    // for (int j : a)
                                    // {
                                    // System.out.print(j);
                                    // }

        // 19 . find how many even and odd numbers are present in array. 
                                        // int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
                                        // int l = a.length;
                                        // int even = 0;  //, odd = 0;
                                        // for (int i = 0; i < l; i++) {
                                        //         if (a[i] % 2 == 0) {
                                        //                 even++;
                                        //         }
                                        //         // else{
                                        //         //     odd++;
                                        //         // }
                                        // }
                                        // System.out.println(even + " " + (l - even));

        // 20.  difference between largest and smallest values in array. 
                                        // int a[] = { 54, 22, 78, 23, 41, 89};
                                        //     int l = a.length;
                                        //             // first method
                                        //     int max = a[0], min = a[0];  // not set default value as 0 . 
                                        //     for (int i = 0; i < l; i++) {
                                        //             if (a[i] > max) {
                                        //                     max = a[i];
                                        //             }else if (a[i] < min) {
                                        //                     min = a[i];
                                        //             }
                                        //     }
                                        //     System.out.println("smallest   : " + min + " \n largest   : " + max + "\ndifference : " + (max - min));

                                        //         // second method
                                        // Arrays.sort(a);
                                        // System.out.println("\nsmallest   : " + a[0] + " \n largest   : " + a[l-1] + "\ndifference : " + (a[l-1] - a[0]));

        //  21 . average value of an array , without largest and smallest. 
                                        // int a[] = {1, 2, 3, 4, -5 ,6, -7, 8, 9};
                                        // int ave = 1, l = a.length;
                                        // if (l != 0) {
                                        //     for (int i = 1; i < l-1; i++) {
                                        //             System.out.print(a[i] + "\s"); // get all values expect 1 and 9. 
                                        //             ave *= i; 
                                        //     }
                                        //     System.out.println("\n average : " + (ave/l));
                                        // }

        //  22. check if an array of integers is without 0 and -1
                                        // int a[] = {1, 2, 3, 4, 9, 1};
                                        // int l = a.length;
                                        // boolean b = true;
                                        // if (l > 0) {
                                        //         for (int i = 0; i < l; i++) {
                                        //                 if (a[i] == 0 || a[i] == -1) {
                                        //                     b = false; // System.out.println("not a desired array. ");
                                        //                      break;        
                                        //                  }//else{
                                        //                     //     System.out.println("desired array : " + Arrays.toString(a));
                                        //                     // }
                                        //         }
                                        // }
                                        // if (b) {
                                        //     System.out.println("desired array : " + Arrays.toString(a));
                                        // }else{
                                        //     System.out.println("undesired array : " + Arrays.toString(a));
                                        // }


        // 23 . sum of all 10's in the array is exactly 30 .

                                    //     int a[] = {10, 15, 10, 30, 56, 10};
                                    //     int sum = 0, j = 0;
                                    //     for (int i : a) {
                                    //             if (a[j] == 10)  {
                                    //                 // if we place i in place of j then array first element 10 is in i so a[10], but this is our of length. 
                                    //                 // i takes element not index. 
                                    //                     sum += a[j];
                                    //                    // j++;  --   incrementing two times at once if 10 is found. 
                                    //             }
                                    //             j++;
                                    //     }
                                    //   //  if (sum == 30) ? return true : return false;// System.out.println("true") : System.out.println("false");
                                    //     System.out.println((sum == 30) ? "true" : "false");


        // 24 . check two specified element in an array. 
                                // int a[] =  {12, 56, 32, 89, 54, 23, 90};
                                // int first = 89, second = 56;
                                // int l = a.length;
                                // for (int i = 0; i < l; i++) {
                                //             for (int j = 0; j < l; j++) {
                                //              System.out.print( (a[i] == first && a[j] == second) ? "true" : "" );
                                //             }
                                // }
                               
        // 25 .  sum of the two element of a given array equal to a given integer. 
                                    // int a[] = {1, 2, 3, 4, 5, 6, 7, 8, 9 };
                                    // int l = a.length;
                                    // int val = 11;
                                    // for (int i = 0; i < l; i++) {
                                    //     for (int j = i + 1; j < l; j++) {   // without i+1, we r getting some repeted solution like 2+9 & 9+2.
                                    //                 if (a[i] + a[j] == val) {
                                    //                         System.out.println("successful for :  " + a[i] + " + " + a[j]);
                                    //                 }
                                    //     }
                                    // }
       //  26. find all the different triplets such that the sum of all three elements is equal to specified value. 
                                    // int a[] = {1, -4, 5, 2, -1, 0};
                                    // int l = a.length;
                                    // int val = 6;
                                    // for (int i = 0; i < l; i++) {
                                    //         for (int j = i+1; j < l; j++) {
                                    //                 for (int j2 = j+1; j2 < l; j2++) {
                                    //                             if (a[i] + a[j] + a[j2] == val) {
                                    //                                     System.out.println(" Successful :) " + a[i] + " + " +a[j] + " + " + a[j2]);
                                    //                             }
                                    //                 }
                                    //         }
                                    // }

        
    // 27. get the majority element is an element that appears more than l/2 times.
                                    int a[] = { 1, 5, 3, 7, 8, 3, 5, 2, 7, 2, 2, 2, 2 };
                                    int l = a.length;
                                    int t = l/2, count = 0;
                                    System.out.println(" Desired number to appear : " + t);
                                    for (int i = 0; i < l; i++) {
                                            for (int j = 0; j < l; j++) {
                                                    if ( a[i] == a[j]) {
                                                            count++;
                                                    }
                                            }
                                            if (count == t) {
                                                    System.out.println(a[i] + " is majority elements. ");
                                            }
                                        
                                    }

     // 28 .  find all the laders( if it's greater than all the element to it's right side ) in an array.        
                                int a[] = {11, 2, 3, 4, 9, 8, 7, 1, 0, 6, 5};
                                int l = a.length;
                                 for (int i = 0; i < l; i++) {
                                        int j;
                                        for ( j = i + 1; j < l; j++) {
                                                if ( a[i] <= a[j]) {   // check element is smaller then the next element or not, if yes than break loop
                                // and get next element(second) from array & check it to all the other elements, if it's bigger than all the elements 
                                //than loop ends when j<l, means ( j = 11 ), so j is equal to array length , then that elem get printed.  
                                                        break;
                                                }
                                        }
                                        if ( j == l) {
                                                System.out.println(" j = " + j + ",  l = " + l);
                                                System.out.println( "leader : " + a[i] + " \s \n ");
                                        }
                                 }

       // 29 . find two elements in a given array of positive and negative number such that their sum is close to zero. 
                                int a[] = {-1, 3, 6, -7, -2, 4, -5};
                                int l = a.length;
                                for (int i = 0; i < l; i++) {
                                                for (int j = i+1; j < l; j++) {  
                                                        // use i+1 avoid repetive result, like ( 3, -2 and -2 and 3)
                                                                if (a[i] + a[j] >= 0 && a[i] + a[j] <= 1) {
                                                                        System.out.println("solution : "+a[i] + " " + a[j] + " = " + (a[i] + a[j]));
                                                                }
                                                }
                                }

        //  30 . seprate 0's and 1's in an array into left and right side. 
                                int a[] = {1, 0, 0, 1, 0, 1, 1, 0, 1, 0};
                                System.out.println(Arrays.toString(a));
                                int l = a.length;
                                int f_idx = 0, l_idx = l-1 ;
                                       
                        while (f_idx < l_idx) {  // entry if first index smaller then last index ( array have some elements )
                                while ( a[f_idx] == 0 ) {
                                       // a[f_idx] = 0;
                                        f_idx++;  // index increasing from start.
                                }
                                while ( a[l_idx] == 1 ) {
                                        //a[l_idx]  = 0;
                                        l_idx--;  // index decreasing from last. 
                                }
                                if ( f_idx < l_idx ) {
                                        a[f_idx] = 0;
                                        a[l_idx] = 1;
                                        f_idx++;
                                        l_idx--;
                                }

                        }
                        System.out.println(Arrays.toString(a));

     // 31 . coount number of possible triangles from a given unsorted array of positive integer. 
                         // sum of length of any two sides of traingle must be greater then or equal to length of third side. 
                         int a[] = {3, 5, 4};
                         int count = 0;
                         int l = a.length;
                         Arrays.sort(a);
                         System.out.println(Arrays.toString(a));

                         for (int i = 0; i < l-2; ++i) {         // first element
                                int third_elem = i+2;            // third element
                                for (int j = i+1; j < l; ++j) {  // second element

                                        while ( third_elem < l && a[i] + a[j] >= a[third_elem]) {
                                        ++third_elem;
                                        count += third_elem - j - 1;
                                        }
                                }
                         }
                        System.out.println(" No. of triangle : " + count);

    // 32. cyclically rotate a array clockwise by one.
                         int a[] = {10, 20, 30, 40, 50, 60};
                          int l = a.length;
                          System.out.println(Arrays.toString(a));

                          int last = a[l-1];
                          //System.out.println(last);  // 60
                          for (int i = l-1; i > 0; i--) {
                                    a[i] = a[i-1];  // shifting
                          }
                          a[0] = last;

                          System.out.println(Arrays.toString(a));

    // 33. arrange elements of an array so that all positive integers appear before all nagative int. 
                            int a[] = {-1, 23, 56 ,2,3 ,1, 53 , 65,6 ,-4, -2, -6, -7, -1, -34};
                            int l = a.length;
                            for (int i = 0; i < l; i++) {
                                    int j = i;  // at first time while doesn't executed coz to get j-1 at next term. 
                                    // j>0 to avoid execution of while loop at first time, to avoid idxOutOfBound error(-1) .
                                    while ( j > 0 && a[j] > 0 && a[j-1] < 0 ) {  // runs when current idx is posotive & previous one is negative.
                                            // changing order by shifting negative forward and positive in starting. 
                                            int temp = a[j];
                                            a[j] = a[j-1];  // to last -> 
                                            a[j-1] = temp;  // starting
                                            j--;
                                           
                                    }
                            }
                            System.out.println(Arrays.toString(a));




    }
}
